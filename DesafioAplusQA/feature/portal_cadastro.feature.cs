// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DesafioAplusQA.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PortalDeInscricaoDeCursosDeGraduacaoEPos_GraduacaoFeature : object, Xunit.IClassFixture<PortalDeInscricaoDeCursosDeGraduacaoEPos_GraduacaoFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "portal_cadastro.feature"
#line hidden
        
        public PortalDeInscricaoDeCursosDeGraduacaoEPos_GraduacaoFeature(PortalDeInscricaoDeCursosDeGraduacaoEPos_GraduacaoFeature.FixtureData fixtureData, DesafioAplusQA_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "feature", "Portal de Inscrição de cursos de graduação e pos-graduação", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC01 Usuário seleciona nível de ensino")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC01 Usuário seleciona nível de ensino")]
        public void AC01UsuarioSelecionaNivelDeEnsino()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC01 Usuário seleciona nível de ensino", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
        testRunner.Given("que o usuário acessa o portal de inscrições", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 6
        testRunner.When("ele seleciona a opção \"graduação\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 7
        testRunner.Then("o sistema avança e exibe a mensagem \"Selecione seu curso de Graduação\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC02 Sistema apresenta os cursos de pós-graduação")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC02 Sistema apresenta os cursos de pós-graduação")]
        public void AC02SistemaApresentaOsCursosDePos_Graduacao()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC02 Sistema apresenta os cursos de pós-graduação", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
        testRunner.Given("que o usuário acessa o portal de inscrições", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
        testRunner.When("ele seleciona a opção \"pos-graduação\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 12
        testRunner.Then("o sistema avança e exibe a mensagem \"Selecione seu curso de Pós-graduação\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC03 Usuário pesquisa pelo curso disponível utilizando o campo de busca")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC03 Usuário pesquisa pelo curso disponível utilizando o campo de busca")]
        public void AC03UsuarioPesquisaPeloCursoDisponivelUtilizandoOCampoDeBusca()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC03 Usuário pesquisa pelo curso disponível utilizando o campo de busca", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
        testRunner.Given("que o usuário está na área de seleção de curso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 16
        testRunner.When("ele pesquisa por um curso \"Direito\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 17
        testRunner.Then("o sistema apresenta o curso pesquisado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC04 Usuário pesquisa por um curso não disponível utilizando o campo de busca")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC04 Usuário pesquisa por um curso não disponível utilizando o campo de busca")]
        public void AC04UsuarioPesquisaPorUmCursoNaoDisponivelUtilizandoOCampoDeBusca()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC04 Usuário pesquisa por um curso não disponível utilizando o campo de busca", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
        testRunner.Given("que o usuário está na área de seleção de curso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 21
        testRunner.When("ele pesquisa por um curso \"Medicina\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 22
        testRunner.Then("o sistema apresenta a mensagem \"Curso não encontrado\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC05 Usuário avança sem selecionar uma opção de curso")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC05 Usuário avança sem selecionar uma opção de curso")]
        public void AC05UsuarioAvancaSemSelecionarUmaOpcaoDeCurso()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC05 Usuário avança sem selecionar uma opção de curso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
        testRunner.Given("que o usuário está na área de seleção de curso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 26
        testRunner.When("ele clica em \"avançar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 27
        testRunner.Then("o sistema apresenta uma mensagem \"Por favor, selecione um curso...\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC06 Usuário seleciona um curso disponível e avança")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC06 Usuário seleciona um curso disponível e avança")]
        public void AC06UsuarioSelecionaUmCursoDisponivelEAvanca()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC06 Usuário seleciona um curso disponível e avança", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
        testRunner.Given("que o usuário está na área de seleção de curso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 31
        testRunner.And("seleciona a opção \"Ciência da Computação\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 32
        testRunner.When("o usuário clica em \"avançar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 33
        testRunner.Then("o sistema apresenta a janela de cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="AC07 Preenchimento dos dados obrigatórios no cadastro")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC07 Preenchimento dos dados obrigatórios no cadastro")]
        [Xunit.InlineDataAttribute("321.321.343.56", "Bruce", "Silva", "20/04/2022", "Bruce@bruce.com", "11983458745", "88058577", "Rua Bruce", "Cisfild", "São Paulo", "SP", "Brasil", "Valido", new string[0])]
        public void AC07PreenchimentoDosDadosObrigatoriosNoCadastro(string cPF, string nome, string sobrenome, string data, string email, string celular, string cPE, string eNDERECO, string bAIRRO, string cidade, string eSTADO, string pAIS, string resultado, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CPF", cPF);
            argumentsOfScenario.Add("Nome", nome);
            argumentsOfScenario.Add("Sobrenome", sobrenome);
            argumentsOfScenario.Add("Data", data);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("celular", celular);
            argumentsOfScenario.Add("CPE", cPE);
            argumentsOfScenario.Add("ENDERECO", eNDERECO);
            argumentsOfScenario.Add("BAIRRO", bAIRRO);
            argumentsOfScenario.Add("Cidade", cidade);
            argumentsOfScenario.Add("ESTADO", eSTADO);
            argumentsOfScenario.Add("PAIS", pAIS);
            argumentsOfScenario.Add("Resultado", resultado);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC07 Preenchimento dos dados obrigatórios no cadastro", "        Contexto: O usuário está no formulário de cadastro após ter selecionado u" +
                    "m curso.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
        testRunner.Given("que o usuário esta na pagina de cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 38
        testRunner.And("o sistema exibe o formulário de cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 39
        testRunner.When(string.Format("o usuário preenche os seguintes campos obrigatórios <cpf>, <nome>, <sobrenome>, <" +
                            "data>, <email>, {0}, <CEP>, <endereço>, <bairro>, <cidade>, <estado>, e <país>", celular), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 40
        testRunner.Then("o sistema deve <resultado>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC8 Ao finalizar o cadastro o sistema fornece login e senha")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC8 Ao finalizar o cadastro o sistema fornece login e senha")]
        public void AC8AoFinalizarOCadastroOSistemaForneceLoginESenha()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC8 Ao finalizar o cadastro o sistema fornece login e senha", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
        testRunner.Given("que o usuário finaliza o preenchimento do cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 48
        testRunner.And("submete o cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 49
        testRunner.Then("o sistema finaliza o cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 50
        testRunner.And("exibe o usuário e senha para o usuário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 51
        testRunner.And("a mensagem \"Sua jornada começa aqui!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="AC09 Acesso à área do candidato com login e senha")]
        [Xunit.TraitAttribute("FeatureTitle", "Portal de Inscrição de cursos de graduação e pos-graduação")]
        [Xunit.TraitAttribute("Description", "AC09 Acesso à área do candidato com login e senha")]
        [Xunit.InlineDataAttribute("candidato", "subscription", "Válido", "Dados válidos", new string[0])]
        [Xunit.InlineDataAttribute("candidato", "", "Inválido", "Senha em branco", new string[0])]
        [Xunit.InlineDataAttribute("", "subscription", "Inválido", "Usuário em branco", new string[0])]
        [Xunit.InlineDataAttribute("", "", "Inválido", "Campos em branco", new string[0])]
        public void AC09AcessoAAreaDoCandidatoComLoginESenha(string usuario, string senha, string resultado, string contexto, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Usuário", usuario);
            argumentsOfScenario.Add("Senha", senha);
            argumentsOfScenario.Add("Resultado", resultado);
            argumentsOfScenario.Add("Contexto", contexto);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC09 Acesso à área do candidato com login e senha", "        Contexto: O usuário recebeu o login e senha após finalizar o cadastro.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
        testRunner.Given("que o usuário recebeu o login e senha", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 56
        testRunner.When("ele tenta fazer login no portal de candidatos com os seguintes dados <usuario> e " +
                        "<senha>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 57
        testRunner.Then("<resultado>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PortalDeInscricaoDeCursosDeGraduacaoEPos_GraduacaoFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PortalDeInscricaoDeCursosDeGraduacaoEPos_GraduacaoFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
